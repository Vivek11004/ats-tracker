{"version":3,"sources":["app.js"],"names":["document","addEventListener","API_BASE_URL","resumeData","uploadBtn","getElementById","pasteBtn","resumeFile","loader","analysisOutput","resumeText","parseAndAnalyze","formData","url","parseRes","jd","payload","_ref","_ref2","scoreRes","matchRes","scoreData","matchData","regeneratorRuntime","async","_context3","prev","next","alert","parsedOutput","innerHTML","awrap","fetch","sent","ok","t0","Error","t1","text","t2","t3","concat","call","json","displayParsedData","jobDescription","value","trim","resume_data","job_description","Promise","all","handleParseText","method","headers","Content-Type","body","JSON","stringify","_slicedToArray","displayAnalysis","t4","console","error","message","setLoading","finish","stop","data","html","name","phone","skills","map","s","join","score","feedback","f","similarity_score","matched_keywords","missing_keywords","isLoading","tabButtons","remove","tabContents","forEach","content","classList","querySelectorAll","tab","add","FormData","append","files","handleParseFile","_context2","abrupt"],"mappings":"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","file":"app.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const API_BASE_URL = 'http://127.0.0.1:8000';\r\n\r\n    // State\r\n    let resumeData = null;\r\n\r\n    // DOM Elements\r\n    const uploadBtn = document.getElementById('uploadBtn');\r\n    const pasteBtn = document.getElementById('pasteBtn');\r\n    const resumeFile = document.getElementById('resumeFile');\r\n    const resumeText = document.getElementById('resumeText');\r\n    const jobDescription = document.getElementById('jobDescription');\r\n    const loader = document.getElementById('loader');\r\n    const parsedOutput = document.getElementById('parsedOutput');\r\n    const analysisOutput = document.getElementById('analysisOutput');\r\n\r\n    // Tab handling\r\n    const tabButtons = document.querySelectorAll('.tab-btn');\r\n    const tabContents = document.querySelectorAll('.tab-content');\r\n    tabButtons.forEach(button => {\r\n        button.addEventListener('click', () => {\r\n            tabButtons.forEach(btn => btn.classList.remove('active'));\r\n            button.classList.add('active');\r\n            tabContents.forEach(content => content.classList.remove('active'));\r\n            document.getElementById(button.dataset.tab).classList.add('active');\r\n        });\r\n    });\r\n\r\n    // Event Listeners\r\n    uploadBtn.addEventListener('click', handleParseFile);\r\n    pasteBtn.addEventListener('click', handleParseText);\r\n\r\n    async function handleParseFile() {\r\n        if (!resumeFile.files.length) {\r\n            alert('Please select a file first.');\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append('file', resumeFile.files[0]);\r\n        await parseAndAnalyze(formData, `${API_BASE_URL}/parse/file`);\r\n    }\r\n\r\n    async function handleParseText() {\r\n        if (!resumeText.value.trim()) {\r\n            alert('Please paste some text first.');\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append('text', resumeText.value);\r\n        await parseAndAnalyze(formData, `${API_BASE_URL}/parse/text`);\r\n    }\r\n\r\n    async function parseAndAnalyze(formData, url) {\r\n        setLoading(true);\r\n        parsedOutput.innerHTML = '';\r\n        analysisOutput.innerHTML = '';\r\n        resumeData = null;\r\n\r\n        try {\r\n            // 1. Parse the resume\r\n            const parseRes = await fetch(url, { method: 'POST', body: formData });\r\n            if (!parseRes.ok) throw new Error(`Parsing failed: ${await parseRes.text()}`);\r\n            resumeData = await parseRes.json();\r\n            displayParsedData(resumeData);\r\n\r\n            // 2. Score and Match\r\n            const jd = jobDescription.value.trim();\r\n            const payload = { resume_data: resumeData, job_description: jd || \"\" };\r\n\r\n            const [scoreRes, matchRes] = await Promise.all([\r\n                fetch(`${API_BASE_URL}/score`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) }),\r\n                fetch(`${API_BASE_URL}/match`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) })\r\n            ]);\r\n\r\n            const scoreData = await scoreRes.json();\r\n            const matchData = await matchRes.json();\r\n            displayAnalysis(scoreData, matchData);\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n            parsedOutput.innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    function displayParsedData(data) {\r\n        let html = `<h3>${data.name}</h3>`;\r\n        html += `<p><strong>Email:</strong> ${data.email}</p>`;\r\n        html += `<p><strong>Phone:</strong> ${data.phone}</p>`;\r\n        html += `<h4>Skills</h4><ul>${data.skills.map(s => `<li>${s}</li>`).join('')}</ul>`;\r\n        parsedOutput.innerHTML = html;\r\n    }\r\n\r\n    function displayAnalysis(scoreData, matchData) {\r\n        let html = `<h3>ATS Score: ${scoreData.score}/100</h3>`;\r\n        html += `<ul>${scoreData.feedback.map(f => `<li>${f}</li>`).join('')}</ul>`;\r\n        \r\n        html += `<hr><h3>Job Match Analysis</h3>`;\r\n        html += `<p><strong>Semantic Similarity:</strong> ${matchData.similarity_score}%</p>`;\r\n        html += `<h4>Matched Keywords:</h4><p>${matchData.matched_keywords.join(', ') || 'None'}</p>`;\r\n        html += `<h4>Missing Keywords:</h4><p>${matchData.missing_keywords.join(', ') || 'None'}</p>`;\r\n\r\n        analysisOutput.innerHTML = html;\r\n    }\r\n\r\n    function setLoading(isLoading) {\r\n        loader.style.display = isLoading ? 'block' : 'none';\r\n    }\r\n});"]}